#include <iostream>
#include <climits>
using namespace std;

class Graph{
	int n; 
	int e; 

	int * startNode;
	int * endNode;
	int * weight;

	public:

		Graph(int node,int edges){
			n = node;
			e = edges;
			startNode = new int[e];
			endNode = new int[e];
			weight = new int[e];
		}

	
		void input(){
			int src,end,wt;
			cout<<"\nStart entering edges (source,destination,weight):-"<<endl;
			for(int i = 0;i<e; i++){
				cout<<"\n-> Enter the edge "<<i+1<<" : ";
				cin>>src>>end>>wt;
				startNode[i] = src;
				endNode[i] = end;
				weight[i] = wt;
			}
		}

		void shortestPath(){
			int srcnd;

			cout<<"\n\n>> Finding the Shortest Path:-";
		
			cout<<"\n-> Enter the source node : ";
			cin>>srcnd;

			int dist[n+1];
			
			for(int i = 0; i<=n ; i++){
				dist[i] = INT_MAX;
			}

			dist[srcnd] = 0;

			for(int i = 1; i<n; i++){
				for(int j = 0; j<e; j++){
					int u = startNode[j];
					int v = endNode[j];
					int w = weight[j];

					if(dist[u]!=INT_MAX && dist[v] > dist[u] + w){
						dist[v] = dist[u] + w;
					}
				}
			}

			bool negCycle = 0;
			for(int j = 0; j<e; j++){
					int u = startNode[j];
					int v = endNode[j];
					int w = weight[j];

					if(dist[u]!=INT_MAX && dist[v] > dist[u] + w){
						negCycle = 1;
					}
			}

			if(negCycle){
				cout<<"\n--> Negative cycle exists in the graph !";
			}else{
				cout<<"\nShortest path of each node from source node "<<srcnd<<endl;
				cout<<"Node \t distance\n";
				for(int i = 1; i<=n; i++){
					if(dist[i]==INT_MAX){
						cout<<i<<"    :    No available path"<<endl;
					}else{
						cout<<i<<"    :    "<<dist[i]<<endl;
					}
				}
			}

		}

};

int main(){
	cout<<"-------------------- Bellman Ford Algorithm ---------------------"<<endl;
	int n,e;
	
	cout<<"\n>>Enter the total number of nodes : ";
	cin>>n;
	
	cout<<"\n>>Enter the total number of edges : ";
	cin>>e;
	

	Graph g(n,e);
	g.input();
	g.shortestPath();
	return 0;
}
